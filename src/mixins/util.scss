@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

@function list-substring-find($list, $search) {
  @each $item in $list {
    @if str-index($search, $item) {
      @return $item;
    }
  }

  @return null;
}

@function number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: (
    '0': 0,
    '1': 1,
    '2': 2,
    '3': 3,
    '4': 4,
    '5': 5,
    '6': 6,
    '7': 7,
    '8': 8,
    '9': 9,
  );

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not(index(map-keys($numbers), $character) or $character == '.') {
      @return if($minus, -$result, $result);
    }

    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return if($minus, -$result, $result);
}

@mixin multiple-selectors($base, $selectors) {
  @if not str-index($base, '%sel%') {
    @error 'base is invalid';
  }

  @if $selectors {
    @each $selector in $selectors {
      $transformed-selector: str-replace($base, '%sel%', $selector);
      $selectors: set-nth($selectors, index($selectors, $selector), $transformed-selector);
    }

    // to make sure the list will be comma-separated
    $selectors: join($selectors, (), comma);

    #{$selectors} {
      @content;
    }
  }
}
